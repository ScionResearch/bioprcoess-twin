# Telegraf Configuration for Bioprocess Digital Twin
# Ingests sensor data from MQTT and writes to InfluxDB

[global_tags]
  environment = "production"
  system = "bioprocess-twin"

[agent]
  interval = "1s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "1s"
  flush_jitter = "0s"
  precision = "1ms"
  hostname = "jetson-edge"
  omit_hostname = false

###############################################################################
#                            INPUT PLUGINS                                     #
###############################################################################

# MQTT Consumer - Subscribe to all sensor topics
[[inputs.mqtt_consumer]]
  servers = ["tcp://mosquitto:1883"]
  topics = [
    "bioprocess/pichia/vessel1/sensors/#",
    "bioprocess/pichia/vessel1/telemetry/#"
  ]

  ## Connection settings
  client_id = "telegraf-vessel1"
  qos = 1
  connection_timeout = "30s"

  ## Data format
  data_format = "value"
  data_type = "float"

  ## Topic parsing to extract measurement name
  ## Topic: bioprocess/pichia/vessel1/sensors/pH
  ## Will create measurement "pH" with field "value"
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "bioprocess/pichia/+/sensors/+"
    measurement = "measurement/_/_/_/4"
    tags = "vessel/_/_/2/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "bioprocess/pichia/+/sensors/temperature/+"
    measurement = "measurement/_/_/_/_/5"
    tags = "vessel/_/_/2/_/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "bioprocess/pichia/+/sensors/pressure/+"
    measurement = "measurement/_/_/_/_/5"
    tags = "vessel/_/_/2/_/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "bioprocess/pichia/+/sensors/offgas/+"
    measurement = "measurement/_/_/_/_/5"
    tags = "vessel/_/_/2/_/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "bioprocess/pichia/+/telemetry/+"
    measurement = "measurement/_/_/_/4"
    tags = "vessel/_/_/2/_"

###############################################################################
#                            PROCESSOR PLUGINS                                 #
###############################################################################

# Add batch_id tag from environment (set when batch starts)
[[processors.enum]]
  [[processors.enum.mapping]]
    ## Optional: Tag batch runs
    tag = "batch_id"
    default = "unknown"

# Rename fields for consistency
[[processors.rename]]
  [[processors.rename.replace]]
    field = "value"
    dest = "_value"

###############################################################################
#                            OUTPUT PLUGINS                                    #
###############################################################################

# InfluxDB v2 Output - Raw 1 Hz data
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "${INFLUX_BUCKET}"

  ## Timeout for HTTP messages
  timeout = "5s"

  ## HTTP User-Agent
  user_agent = "telegraf-bioprocess-twin"

  ## Content encoding (gzip for performance)
  content_encoding = "gzip"

  ## Enable or disable tag sanitization
  influx_uint_support = true

# Optional: File output for debugging (comment out in production)
# [[outputs.file]]
#   files = ["/tmp/telegraf-debug.out"]
#   data_format = "influx"

###############################################################################
#                            AGGREGATOR PLUGINS                                #
###############################################################################

# 30-second aggregation window for feature engineering
# This creates mean, stddev, min, max for each sensor over 30s windows
[[aggregators.basicstats]]
  ## Aggregation period
  period = "30s"

  ## Drop original (1 Hz) metrics after aggregation
  drop_original = false

  ## Statistics to compute
  stats = ["mean", "stdev", "s2", "min", "max", "count"]

  ## Output to different bucket (handled by output config below)

# Output aggregated data to 30s bucket
[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${INFLUX_TOKEN}"
  organization = "${INFLUX_ORG}"
  bucket = "pichia_30s"

  ## Only send aggregated metrics to this bucket
  namepass = ["*_basicstats"]

  timeout = "5s"
  content_encoding = "gzip"
